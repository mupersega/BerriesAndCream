var It=Object.defineProperty;var xt=(o,t,e)=>t in o?It(o,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):o[t]=e;var l=(o,t,e)=>xt(o,typeof t!="symbol"?t+"":t,e);(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const i of document.querySelectorAll('link[rel="modulepreload"]'))s(i);new MutationObserver(i=>{for(const r of i)if(r.type==="childList")for(const n of r.addedNodes)n.tagName==="LINK"&&n.rel==="modulepreload"&&s(n)}).observe(document,{childList:!0,subtree:!0});function e(i){const r={};return i.integrity&&(r.integrity=i.integrity),i.referrerPolicy&&(r.referrerPolicy=i.referrerPolicy),i.crossOrigin==="use-credentials"?r.credentials="include":i.crossOrigin==="anonymous"?r.credentials="omit":r.credentials="same-origin",r}function s(i){if(i.ep)return;i.ep=!0;const r=e(i);fetch(i.href,r)}})();class st{constructor(){l(this,"DIAGONAL_COST",Math.SQRT2);l(this,"STRAIGHT_COST",1);l(this,"isWalkable",null);l(this,"onVisualizationUpdate")}pointToKey(t){return`${t.x},${t.y}`}isAtGoal(t,e){return t.x===e.x&&t.y===e.y}getLowestCostNode(t){let e=1/0,s=null;return t.forEach(i=>{i.cost<e&&(e=i.cost,s=i)}),s}getNeighbors(t,e,s){const i=[],r=[{x:0,y:-1,cost:this.STRAIGHT_COST},{x:1,y:-1,cost:this.DIAGONAL_COST},{x:1,y:0,cost:this.STRAIGHT_COST},{x:1,y:1,cost:this.DIAGONAL_COST},{x:0,y:1,cost:this.STRAIGHT_COST},{x:-1,y:1,cost:this.DIAGONAL_COST},{x:-1,y:0,cost:this.STRAIGHT_COST},{x:-1,y:-1,cost:this.DIAGONAL_COST}];for(const n of r){const a=t.position.x+n.x,h=t.position.y+n.y;a<0||a>=e||h<0||h>=s||i.push({position:{x:a,y:h},cost:n.cost,parent:null,isExplored:!1,isInOpenSet:!1,isInPath:!1})}return i}reconstructPath(t){const e=[];let s=t;for(;s;)e.unshift(s.position),s=s.parent;return e}setVisualizationCallback(t){this.onVisualizationUpdate=t}findPath(t,e,s,i,r){var y,u;this.isWalkable=s;const n=new Map,a=new Set,h={position:{x:Math.round(t.x),y:Math.round(t.y)},cost:0,parent:null,isExplored:!1,isInOpenSet:!0,isInPath:!1};n.set(this.pointToKey(h.position),h);const g=new Map;for(;n.size>0;){const v=this.getLowestCostNode(n);if(!v)break;if(v.isExplored=!0,v.isInOpenSet=!1,g.set(this.pointToKey(v.position),v),this.isAtGoal(v.position,e)){let d=v;for(;d;)d.isInPath=!0,g.set(this.pointToKey(d.position),d),d=d.parent;return(y=this.onVisualizationUpdate)==null||y.call(this,g),this.reconstructPath(v)}n.delete(this.pointToKey(v.position)),a.add(this.pointToKey(v.position));for(const d of this.getNeighbors(v,i,r)){const T=this.pointToKey(d.position);if(a.has(T)||!s(d.position.x,d.position.y))continue;const m=v.cost+d.cost,S=n.get(T);S?m<S.cost&&(S.cost=m,S.parent=v):(d.cost=m,d.parent=v,d.isInOpenSet=!0,n.set(T,d),g.set(T,d))}(u=this.onVisualizationUpdate)==null||u.call(this,g)}return console.warn(`[Dijkstra] No path found from (${t.x}, ${t.y}) to (${e.x}, ${e.y})`),null}}var c=(o=>(o[o.DeepWater=0]="DeepWater",o[o.Water=1]="Water",o[o.Sand=2]="Sand",o[o.Grass=3]="Grass",o[o.Highlands=4]="Highlands",o[o.Dirt=5]="Dirt",o[o.Stone=6]="Stone",o[o.Snow=7]="Snow",o))(c||{}),I=(o=>(o[o.BerryBush=0]="BerryBush",o[o.BerryPile=1]="BerryPile",o[o.BerryTree=2]="BerryTree",o[o.Corpse=3]="Corpse",o[o.Tree=4]="Tree",o))(I||{}),C=(o=>(o[o.Berries=0]="Berries",o[o.Wood=1]="Wood",o[o.Cream=2]="Cream",o[o.Stone=3]="Stone",o))(C||{}),_=(o=>(o.Berry="berry",o.Cream="cream",o.Wood="wood",o.Stone="stone",o))(_||{});class Ct{constructor(){l(this,"HARVEST_DELAY",60);l(this,"harvestTimer",0);l(this,"currentBerry",null);l(this,"pathfinder",new st)}isBerryResource(t){return t===I.BerryBush||t===I.BerryPile||t===I.BerryTree}update(t){if(!t.hasInventorySpace()&&!this.currentBerry){this.currentBerry=null,this.harvestTimer=0,t.setBehavior("Flush"),t.setLastBehavior("Forage");return}if(this.currentBerry&&this.harvestTimer>0){if(t.clearTarget(),this.harvestTimer--,this.harvestTimer===0){if(this.currentBerry.harvest(1)>0&&!t.addToInventory({type:_.Berry,quantity:1})){this.currentBerry.addAmount(1),this.currentBerry=null;return}this.currentBerry.isDepleted()||!t.hasInventorySpace()?this.currentBerry=null:this.harvestTimer=this.HARVEST_DELAY}return}const e=t.getPosition(),s=f.getResources().filter(i=>{if(!this.isBerryResource(i.getType())||i.isDepleted())return!1;const r=i.getPosition();return Math.hypot(r.x-e.x,r.y-e.y)<=.82});if(s.length>0){this.currentBerry=s[0],this.harvestTimer=this.HARVEST_DELAY,t.clearTarget();return}if(t.hasTarget()){const i=t.getTarget();if(!i)return;if(Math.hypot(i.x-e.x,i.y-e.y)<=.5)t.clearTarget();else return}if(!t.hasTarget()){const i=this.findNearestBerry(t);if(i){const r=i.getPosition();t.setTarget(r.x,r.y)}}}getName(){return"Forage"}findNearestBerry(t){const e=t.getPosition();let s=null,i=1/0;const r=f.getForageableTiles(),n=f.getResources().filter(a=>{const h=a.getPosition();return r.some(g=>Math.floor(h.x)===g.x&&Math.floor(h.y)===g.y)});for(const a of n){if(!this.isBerryResource(a.getType())||a.isDepleted())continue;const h=a.getPosition(),g=Math.hypot(h.x-e.x,h.y-e.y),y=this.pathfinder.findPath({x:Math.round(e.x),y:Math.round(e.y)},{x:Math.round(h.x),y:Math.round(h.y)},(v,d)=>!t.isWater(v,d),t.getMap()[0].length,t.getMap().length),u=y?y.length:g;u<i&&(i=u,s=a)}return s}}class Dt{update(t){t.clearTarget()}getName(){return"Idle"}}class kt{constructor(){l(this,"CHOP_DELAY",120);l(this,"chopTimer",0);l(this,"currentTree",null);l(this,"pathfinder",new st)}isTreeResource(t){return t===I.Tree}update(t){if(!t.hasInventorySpace()&&!this.currentTree){this.currentTree=null,this.chopTimer=0,t.setBehavior("Flush"),t.setLastBehavior("Fell");return}if(this.currentTree&&this.chopTimer>0){if(t.clearTarget(),this.chopTimer--,this.chopTimer===0){if(this.currentTree.harvest(1)>0&&!t.addToInventory({type:_.Wood,quantity:1})){this.currentTree.addAmount(1),this.currentTree=null;return}this.currentTree.isDepleted()||!t.hasInventorySpace()?this.currentTree=null:this.chopTimer=this.CHOP_DELAY}return}const e=t.getPosition(),s=f.getResources().filter(i=>{if(!this.isTreeResource(i.getType())||i.isDepleted())return!1;const r=i.getPosition();return Math.hypot(r.x-e.x,r.y-e.y)<=.82});if(s.length>0){this.currentTree=s[0],this.chopTimer=this.CHOP_DELAY,t.clearTarget();return}if(t.hasTarget()){const i=t.getTarget();if(!i)return;if(Math.hypot(i.x-e.x,i.y-e.y)<=.5)t.clearTarget();else return}if(!t.hasTarget()){const i=this.findNearestTree(t);if(i){const r=i.getPosition();t.setTarget(r.x,r.y)}}}getName(){return"Fell"}findNearestTree(t){const e=t.getPosition();let s=null,i=1/0;const r=f.getFellableTiles(),n=f.getResources().filter(a=>{const h=a.getPosition();return r.some(g=>Math.floor(h.x)===g.x&&Math.floor(h.y)===g.y)});for(const a of n){if(!this.isTreeResource(a.getType())||a.isDepleted())continue;const h=a.getPosition(),g=Math.hypot(h.x-e.x,h.y-e.y),y=this.pathfinder.findPath({x:Math.round(e.x),y:Math.round(e.y)},{x:Math.round(h.x),y:Math.round(h.y)},(v,d)=>!t.isWater(v,d),t.getMap()[0].length,t.getMap().length),u=y?y.length:g;u<i&&(i=u,s=a)}return s}}class Ot{constructor(){l(this,"DEPOSIT_DELAY",30);l(this,"depositTimer",0);l(this,"currentStructure",null)}getName(){return"Flush"}update(t){if(t.getInventory().every(e=>e===null)){t.setBehavior(t.getLastBehavior());return}if(this.currentStructure&&this.depositTimer>0){t.clearTarget(),this.depositTimer--,this.depositTimer===0&&(this.depositItems(t),t.getInventory().every(e=>e===null)?(this.currentStructure=null,t.setBehavior("Explore")):this.depositTimer=this.DEPOSIT_DELAY);return}if(!t.hasTarget()){const e=t.getPosition(),s=this.findNearestStructure(t);if(s&&Math.hypot(s.getPosition().x-e.x,s.getPosition().y-e.y)<=1){this.currentStructure=s,this.depositTimer=this.DEPOSIT_DELAY;return}}if(!t.hasTarget()){const e=this.findNearestStructure(t);if(e){const s=e.getPosition();t.setTarget(s.x,s.y)}}}findNearestStructure(t){const e=t.getPosition();let s=null,i=1/0;const r=window.gameState.getStructures();for(const n of r){const a=n.getPosition(),h=Math.hypot(a.x-e.x,a.y-e.y);h<i&&(i=h,s=n)}return s}depositItems(t){t.getInventory().forEach(s=>{if(s){switch(s.type){case _.Berry:f.addToResourceCount(C.Berries,s.quantity);break;case _.Wood:f.addToResourceCount(C.Wood,s.quantity);break;case _.Cream:f.addToResourceCount(C.Cream,s.quantity);break;case _.Stone:f.addToResourceCount(C.Stone,s.quantity);break}t.removeFromInventory(s.type,s.quantity)}})}}class Ht{constructor(){l(this,"FETCH_RANGE",100);l(this,"CAPTURE_RANGE",2);l(this,"LEAD_RANGE",1);l(this,"target",null);l(this,"follower",null);l(this,"HQ_POSITION",null)}update(t){const e=t.getPosition();if(this.follower){const s=this.follower.getPosition(),i=Math.hypot(s.x-e.x,s.y-e.y);if(i<=this.CAPTURE_RANGE)t.setVelocityMultiplier(1);else{const r=i-this.LEAD_RANGE,n=Math.max(1-r/this.LEAD_RANGE,.1);t.setVelocityMultiplier(n)}if(t.hasTarget()||this.HQ_POSITION&&t.setTarget(this.HQ_POSITION.x,this.HQ_POSITION.y),this.HQ_POSITION){const r=Math.hypot(this.HQ_POSITION.x-e.x,this.HQ_POSITION.y-e.y);(i>this.FETCH_RANGE||r<1)&&(this.follower=null,this.target=null,t.clearTarget())}}else if(t.setVelocityMultiplier(1),this.target||(this.target=this.findNearestCreature(t)),this.target){const s=this.target.getPosition();Math.hypot(s.x-e.x,s.y-e.y)<=this.CAPTURE_RANGE?(console.log(`[Fetch] Attempting to establish leadership with ${this.target.getId()}`),this.follower=this.target,this.target=null,this.follower.setLastBehavior(this.follower.getBehavior()),console.log(`[Fetch] Saved follower's current behavior: ${this.follower.getLastBehavior()}`),this.follower.getBehaviorManager().getBehaviorByName("Follow").setLeader(t),console.log(`[Fetch] Set leader ${t.getId()} for follower's FollowBehavior`),this.follower.setBehavior("Follow"),console.log("[Fetch] Set follower's behavior to Follow"),this.HQ_POSITION=f.getHQPosition(),this.HQ_POSITION&&(t.setTarget(this.HQ_POSITION.x,this.HQ_POSITION.y),t.setBounceSpeed(.08),console.log(`[Fetch] Set fetcher target to HQ: (${this.HQ_POSITION.x}, ${this.HQ_POSITION.y})`))):t.hasTarget()||t.setTarget(s.x,s.y)}}findNearestCreature(t){const e=f.getFetchableTiles(),s=f.getAgents().filter(n=>{const a=n.getPosition();return console.log(n.getAgentType()),e.some(h=>Math.floor(a.x)===h.x&&Math.floor(a.y)===h.y)&&n.getAgentType()==="Cow"});let i=null,r=1/0;for(const n of s){const a=n.getPosition(),h=Math.hypot(a.x-t.getPosition().x,a.y-t.getPosition().y);h<r&&h<=this.FETCH_RANGE&&(r=h,i=n)}return i}getName(){return"Fetch"}}class Lt{constructor(){l(this,"BASE_GRAZE_DURATION",300);l(this,"GRAZE_VARIANCE",240);l(this,"grazeTimer",0)}update(t){if(this.grazeTimer>0){this.grazeTimer--,this.grazeTimer===0&&t.setBehavior("Wander");return}const e=t.getCurrentTile();if(e===c.Grass||e===c.Highlands){this.grazeTimer=this.BASE_GRAZE_DURATION+Math.floor(Math.random()*this.GRAZE_VARIANCE*2)-this.GRAZE_VARIANCE,t.clearTarget();return}if(!t.hasTarget()){let s=0;const i=20,r=10,n=t.getPosition();for(;s<i;){const a=Math.random()*Math.PI*2,h=Math.random()*r,g=Math.floor(n.x+Math.cos(a)*h),y=Math.floor(n.y+Math.sin(a)*h),u=t.getMap();if(g>=0&&g<u[0].length&&y>=0&&y<u.length){const v=u[y][g];if(v===c.Grass||v===c.Highlands){t.setTarget(g,y);break}}s++}}}getName(){return"Graze"}}class Rt{constructor(){l(this,"BASE_WAIT_DURATION",60);l(this,"WAIT_VARIANCE",60);l(this,"waitTimer",0)}update(t){if(this.waitTimer>0)if(this.waitTimer--,this.waitTimer===0){if(Math.random()<.4+Math.random()*.3){t.setBehavior("Graze");return}}else return;if(!t.hasTarget()){const e=t.getPosition();let s=0;const i=20,r=8;for(;s<i;){const n=Math.random()*Math.PI*2,a=2+Math.random()*r,h=Math.floor(e.x+Math.cos(n)*a),g=Math.floor(e.y+Math.sin(n)*a),y=t.getMap();if(h>=0&&h<y[0].length&&g>=0&&g<y.length){const u=y[g][h];if(u===c.Grass||u===c.Highlands){t.setTarget(h,g);break}}s++}this.waitTimer=this.BASE_WAIT_DURATION+Math.floor(Math.random()*this.WAIT_VARIANCE*2)-this.WAIT_VARIANCE}}getName(){return"Wander"}}class Nt{constructor(){l(this,"FOLLOW_RANGE",50);l(this,"UPDATE_THRESHOLD",2);l(this,"MIN_DISTANCE",1);l(this,"leader",null);l(this,"lastLeaderPos",null)}setLeader(t){console.log(`[FollowBehavior] Setting leader to ${t.getId()}`),this.leader=t,this.lastLeaderPos=t.getPosition()}getLeader(){return this.leader}update(t){if(!this.leader||!this.lastLeaderPos){console.log("[FollowBehavior] No leader set, reverting to previous behavior"),t.setBehavior(t.getLastBehavior());return}const e=t.getPosition(),s=this.leader.getPosition(),i=Math.hypot(s.x-e.x,s.y-e.y),r=Math.hypot(s.x-this.lastLeaderPos.x,s.y-this.lastLeaderPos.y);if(console.log("[FollowBehavior] Status:",{distance:i.toFixed(2),leaderMovement:r.toFixed(2),hasTarget:t.hasTarget(),hasPath:t.hasPath(),agentPos:`(${e.x.toFixed(2)}, ${e.y.toFixed(2)})`,leaderPos:`(${s.x.toFixed(2)}, ${s.y.toFixed(2)})`}),i>this.FOLLOW_RANGE){console.log(`[FollowBehavior] Lost leader - too far away (${i.toFixed(2)} > ${this.FOLLOW_RANGE})`),this.leader=null,this.lastLeaderPos=null,t.setBehavior(t.getLastBehavior());return}(!t.hasTarget()||r>this.UPDATE_THRESHOLD&&i>this.MIN_DISTANCE)&&(console.log("[FollowBehavior] Updating path to leader"),t.setTarget(s.x,s.y),this.lastLeaderPos={...s})}getName(){return"Follow"}}class _t{constructor(t=["Idle"]){l(this,"forageBehavior");l(this,"fetchBehavior");l(this,"followBehavior");l(this,"idleBehavior");l(this,"fellBehavior");l(this,"flushBehavior");l(this,"grazeBehavior");l(this,"wanderBehavior");l(this,"currentBehavior",null);l(this,"selectedBehavior","Idle");l(this,"allowedBehaviors");l(this,"lastBehavior","Idle");this.allowedBehaviors=t,this.fetchBehavior=new Ht,this.forageBehavior=new Ct,this.idleBehavior=new Dt,this.fellBehavior=new kt,this.flushBehavior=new Ot,this.grazeBehavior=new Lt,this.wanderBehavior=new Rt,this.followBehavior=new Nt,t.length>0&&(this.selectedBehavior=t[0])}setBehavior(t){if(!this.allowedBehaviors.includes(t)){console.warn("[BehaviorManager] Attempted to set unauthorized behavior:",t);return}console.log("[BehaviorManager] Setting behavior:",{from:this.selectedBehavior,to:t}),this.selectedBehavior=t,this.currentBehavior=null}getLastBehavior(){return this.lastBehavior}setLastBehavior(t){this.lastBehavior=t}getAllowedBehaviors(){return[...this.allowedBehaviors]}update(t){const e=this.getBehaviorByName(this.selectedBehavior);e!==this.currentBehavior&&(console.log("[BehaviorManager] Switching to behavior:",this.selectedBehavior),this.currentBehavior=e,"clearTarget"in t&&t.clearTarget()),this.currentBehavior.update(t)}getBehaviorByName(t){switch(t){case"Forage":return this.forageBehavior;case"Fell":return this.fellBehavior;case"Flush":return this.flushBehavior;case"Graze":return this.grazeBehavior;case"Wander":return this.wanderBehavior;case"Fetch":return this.fetchBehavior;case"Follow":return this.followBehavior;case"Idle":return this.idleBehavior;default:return this.idleBehavior}}getCurrentBehavior(){return this.currentBehavior}}class U{static getHeightOffset(t,e){const s=f.getTileAt(t,e);let i=0;switch(s){case c.DeepWater:i=0;break;case c.Water:i=.15;break;case c.Sand:i=.3;break;case c.Grass:i=.45;break;case c.Highlands:i=.7;break;case c.Dirt:i=.8;break;case c.Stone:i=.9;break;case c.Snow:i=1;break}return i*this.TILE_SIZE}static drawSprite(t,e,s,i,r,n,a){const h=this.getHeightOffset(n,a),g=(s.verticalOffset||0)+(s.additionalOffset||0);t.save();const y=i,u=r-g-h-(s.anchorBottom?s.height-this.TILE_SIZE/2:s.height/2);(s.scaleX!==void 0||s.scaleY!==void 0)&&(t.translate(y,u),t.scale(s.scaleX??1,s.scaleY??1),t.translate(-y,-u)),s.anchorBottom?t.drawImage(e,s.x,s.y,s.width,s.height,i-s.width/2,r-g-h-s.height+this.TILE_SIZE/2,s.width,s.height):t.drawImage(e,s.x,s.y,s.width,s.height,i-s.width/2,r-g-h-s.height/2,s.width,s.height),t.restore()}static worldToScreen(t,e){return{x:(t-e)*this.TILE_SIZE,y:(t+e)*(this.TILE_SIZE/2)}}}l(U,"TILE_SIZE",16);const et=class et{constructor(t,e,s,i,r){l(this,"id");l(this,"x");l(this,"y");l(this,"map");l(this,"target",null);l(this,"waitTime",0);l(this,"WAIT_DURATION",60);l(this,"stuckTime",0);l(this,"STUCK_THRESHOLD",180);l(this,"behaviorManager");l(this,"maxHealth",100);l(this,"currentHealth",100);l(this,"CRITICAL_HEALTH",30);l(this,"isDead_",!1);l(this,"knownResources",new Map);l(this,"exploredTiles",new Set);l(this,"currentPath",[]);l(this,"pathfinder",new st);l(this,"facingLeft",!1);l(this,"animationTime",0);l(this,"MOVE_SPEED",.003);l(this,"MAX_SPEED",.03);l(this,"FRICTION",.85);l(this,"PUSH_FORCE",.8);l(this,"BOUNCE_SPEED",.08);l(this,"BOUNCE_HEIGHT",10);l(this,"BOUNCE_SQUASH",.02);l(this,"isMoving",!1);l(this,"agentType","unset");l(this,"INVENTORY_SIZE",10);l(this,"inventory",[]);l(this,"MAX_STACK_SIZE",1);l(this,"allowedBehaviors",["Forage","Flush","Idle"]);l(this,"currentBehavior","Forage");l(this,"observers",[]);l(this,"velocity",{x:0,y:0});l(this,"acceleration",{x:0,y:0});l(this,"velocityMultiplier",1);l(this,"DEFAULT_BOUNCE_HEIGHT",10);l(this,"DEFAULT_BOUNCE_SPEED",.08);l(this,"DEFAULT_BOUNCE_SQUASH",.02);l(this,"bounceHeight");l(this,"bounceSpeed");l(this,"bounceSquash");if(this.id=`${this.agentType||"agent"}_${et.nextId++}`,this.map=t,e===void 0||s===void 0)do this.x=Math.floor(Math.random()*t[0].length),this.y=Math.floor(Math.random()*t.length);while(!this.isWalkable(this.x,this.y));else this.x=e,this.y=s;this.currentHealth=this.maxHealth,this.allowedBehaviors=i||["Forage","Flush"],this.behaviorManager=new _t(this.allowedBehaviors),this.inventory=new Array(this.INVENTORY_SIZE).fill(null),this.currentBehavior=this.allowedBehaviors[0],this.agentType=r||"agent",this.bounceHeight=this.DEFAULT_BOUNCE_HEIGHT,this.bounceSpeed=this.DEFAULT_BOUNCE_SPEED,this.bounceSquash=this.DEFAULT_BOUNCE_SQUASH}update(){this.isDead_||(this.waitTime>0&&this.waitTime--,this.behaviorManager.update(this),this.updatePhysics(),this.hasTarget()&&this.waitTime<=0&&this.updateMovement(),this.currentHealth<=0&&this.die())}updatePhysics(){this.velocity.x+=this.acceleration.x,this.velocity.y+=this.acceleration.y,this.velocity.x*=this.FRICTION,this.velocity.y*=this.FRICTION,this.velocity.x*=this.velocityMultiplier,this.velocity.y*=this.velocityMultiplier;const t=Math.sqrt(this.velocity.x*this.velocity.x+this.velocity.y*this.velocity.y);t>this.MAX_SPEED&&(this.velocity.x=this.velocity.x/t*this.MAX_SPEED,this.velocity.y=this.velocity.y/t*this.MAX_SPEED);const e=this.x+this.velocity.x,s=this.y+this.velocity.y;this.isWater(e,s)?(this.velocity.x*=-.5,this.velocity.y*=-.5):(this.x=e,this.y=s),this.acceleration.x=0,this.acceleration.y=0}isWater(t,e){if(isNaN(t)||isNaN(e))return!0;const s=Math.round(t),i=Math.round(e);if(i<0||i>=this.map.length||s<0||s>=this.map[0].length)return!0;const r=this.map[i][s];return r===c.Water||r===c.DeepWater}moveTowards(t,e){const s=t-this.x,i=e-this.y,r=s-i;Math.abs(r)>.01&&(this.facingLeft=r<0);const n=Math.sqrt(s*s+i*i);if(n<.8){this.velocity.x=0,this.velocity.y=0,this.isMoving=!1;return}this.isMoving=!0;const a=s/n*this.MOVE_SPEED,h=i/n*this.MOVE_SPEED;this.applyForce(a,h)}applyForce(t,e){this.acceleration.x+=t,this.acceleration.y+=e}draw(t,e,s){const i=window.gameState.getSpritesheetSync();if(!(i!=null&&i.complete))return;this.isMoving?this.animationTime=(this.animationTime+this.bounceSpeed)%(Math.PI*2):this.animationTime=0;const r=(Math.sin(this.animationTime-Math.PI/2)+1)/2,n=Math.pow(r,1.5),a=r<.1?0:n,h=this.isMoving?a*this.bounceHeight:0,g=this.isMoving?1+(1-r)*this.bounceSquash:1,y=this.isMoving?1-(1-r)*this.bounceSquash:1;this.drawShadow(t,e,s);const u=this.getSpritesheetPosition(),v=this.getSpriteSize();U.drawSprite(t,i,{x:u.x,y:u.y,width:v.width,height:v.height,anchorBottom:!0,verticalOffset:0,additionalOffset:h,scaleX:g,scaleY:y},e,s,this.x,this.y)}drawShadow(t,e,s){const i=U.getHeightOffset(this.x,this.y),r=this.isMoving?(1-Math.cos(this.animationTime))*this.bounceHeight*.5:0,n=16,a=4,h=12,g=r*.7,y=-r*.7,u=1+r/32,v=1-r/48,d=.3;t.save(),t.fillStyle=`rgba(0, 0, 0, ${d})`,t.beginPath(),t.translate(e+g,s+5-i+y),t.moveTo(-n/2*u,0),t.quadraticCurveTo(0,a*v,n/2*u,0),t.bezierCurveTo(n/2*u+h/3,-h/4,n/3*u+h/2,-h/1.5,n/4*u+h,-h),t.bezierCurveTo(n/8*u+h/2,-h*1.1,-n/8*u+h/2,-h*1.1,-n/4*u+h,-h),t.bezierCurveTo(-n/3*u+h/2,-h/1.5,-n/2*u+h/3,-h/4,-n/2*u,0),t.fill(),t.restore()}getDrawOrder(){return this.x+this.y}getPosition(){return{x:this.x,y:this.y}}getMap(){return this.map}updateMovement(){if(this.hasPath()){const t=this.getNextPathPoint(),e=Math.hypot(t.x-this.x,t.y-this.y),s=t.x-this.x-(t.y-this.y);Math.abs(s)>.01&&(this.facingLeft=s<0),e<.8?(this.advancePath(),this.hasPath()||(this.clearTarget(),this.waitTime=this.WAIT_DURATION)):this.moveTowards(t.x,t.y)}}setTargetWithPath(t,e){this.target=t,this.currentPath=e}pickNewTarget(){let t=0;const e=50,s=15;for(;t<e;){const i=Math.random()*Math.PI*2,r=Math.random()*s,n=Math.floor(this.x+Math.cos(i)*r),a=Math.floor(this.y+Math.sin(i)*r);if(n>=0&&n<this.map[0].length&&a>=0&&a<this.map.length&&!this.isWater(n,a)){this.setTarget(n,a);return}t++}for(let i=0;i<this.map.length;i++)for(let r=0;r<this.map[0].length;r++)if(!this.isWater(r,i)){this.setTarget(r,i);return}this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.target=null}getTarget(){return this.target}getCurrentTile(){return this.map[Math.floor(this.y)][Math.floor(this.x)]}isStuck(){return this.stuckTime>=this.STUCK_THRESHOLD}getBehavior(){return this.currentBehavior}hasTarget(){return this.target!==null}isWalkable(t,e){const s=this.map[Math.round(e)][Math.round(t)];return s!==c.Water&&s!==c.DeepWater&&s!==c.Stone&&s!==c.Snow}setTarget(t,e){const s={x:Math.round(this.x),y:Math.round(this.y)},i={x:Math.round(t),y:Math.round(e)},r=this.pathfinder.findPath(s,i,(n,a)=>this.isWalkable(n,a),this.map[0].length,this.map.length);r?this.setTargetWithPath(i,r):this.clearTarget()}clearTarget(){this.target=null,this.currentPath=[],this.isMoving=!1}getHealth(){return this.currentHealth}heal(t){this.currentHealth=Math.min(this.maxHealth,this.currentHealth+t),this.notifyHealthChange()}damage(t){this.currentHealth=Math.max(0,this.currentHealth-t),this.notifyHealthChange()}isLowHealth(){return this.currentHealth<=this.CRITICAL_HEALTH}isDead(){return this.isDead_}removeKnownResource(t){const e=t.getPosition(),s=`${Math.round(e.x)},${Math.round(e.y)}`;this.knownResources.delete(s)}addExploredTile(t,e){this.exploredTiles.add(`${Math.round(t)},${Math.round(e)}`)}hasExploredTile(t,e){return this.exploredTiles.has(`${Math.round(t)},${Math.round(e)}`)}setPath(t){this.currentPath=t}hasPath(){return this.currentPath.length>0}getNextPathPoint(){return this.currentPath[0]||null}advancePath(){this.currentPath.shift()}getCurrentPath(){return this.currentPath}addToInventory(t){for(let s=0;s<this.inventory.length;s++){const i=this.inventory[s];if((i==null?void 0:i.type)===t.type&&i.quantity<this.MAX_STACK_SIZE)return i.quantity++,this.notifyInventoryChange(),!0}const e=this.inventory.findIndex(s=>s===null);return e!==-1?(this.inventory[e]={type:t.type,quantity:1},this.notifyInventoryChange(),!0):!1}removeFromInventory(t,e=1){let s=0;for(let i=0;i<this.inventory.length&&s<e;i++){const r=this.inventory[i];if((r==null?void 0:r.type)===t){const n=Math.min(r.quantity,e-s);r.quantity-=n,s+=n,r.quantity===0&&(this.inventory[i]=null)}}return s>0&&this.notifyInventoryChange(),s}getInventoryCount(t){return this.inventory.reduce((e,s)=>e+((s==null?void 0:s.type)===t?s.quantity:0),0)}hasInventorySpace(){return this.inventory.some(t=>t===null||t.quantity<this.MAX_STACK_SIZE)}getInventory(){return[...this.inventory]}die(){this.isDead_=!0}pickNewRandomTarget(){this.pickNewTarget()}getBehaviorManager(){return this.behaviorManager}setNewBehavior(t){this.behaviorManager.setLastBehavior("Idle"),this.behaviorManager.setBehavior(t)}setBehavior(t){if(!this.canUseBehavior(t)){console.warn(`[Agent] Attempted to set unauthorized behavior: ${t}`);return}console.log("[Agent] Setting behavior:",{from:this.currentBehavior,to:t}),this.currentBehavior=t,this.behaviorManager.setBehavior(t),this.clearTarget(),this.notifyBehaviorChange()}setLastBehavior(t){this.behaviorManager.getLastBehavior()!==t&&this.behaviorManager.setLastBehavior(t)}getLastBehavior(){return this.behaviorManager.getLastBehavior()}addObserver(t){this.observers.push(t)}removeObserver(t){const e=this.observers.indexOf(t);e>-1&&this.observers.splice(e,1)}notifyHealthChange(){this.observers.forEach(t=>{var e;(e=t.onHealthChange)==null||e.call(t,this.currentHealth)})}notifyInventoryChange(){this.observers.forEach(t=>{var e;(e=t.onInventoryChange)==null||e.call(t,this.getInventory())})}notifyBehaviorChange(){this.observers.forEach(t=>{var e;(e=t.onBehaviorChange)==null||e.call(t,this.currentBehavior)})}canUseBehavior(t){return this.allowedBehaviors.includes(t)}getAllowedBehaviors(){return[...this.allowedBehaviors]}adjustPosition(t,e){this.applyForce(t*this.PUSH_FORCE,e*this.PUSH_FORCE)}getVelocity(){return{...this.velocity}}getAgentType(){return this.agentType}getId(){return this.id}setVelocityMultiplier(t){this.velocityMultiplier=Math.max(0,t)}setBounceHeight(t){this.bounceHeight=Math.max(0,t)}setBounceSpeed(t){this.bounceSpeed=Math.max(0,t)}setBounceSquash(t){this.bounceSquash=Math.max(0,t)}resetBounceProperties(){this.bounceHeight=this.DEFAULT_BOUNCE_HEIGHT,this.bounceSpeed=this.DEFAULT_BOUNCE_SPEED,this.bounceSquash=this.DEFAULT_BOUNCE_SQUASH}cleanup(){this.observers=[]}};l(et,"nextId",0);let tt=et;class $t extends tt{constructor(e,s,i){super(e,s,i,["Forage","Fell","Flush","Fetch","Idle"],"LittleLad");l(this,"MOVE_SPEED",.002);l(this,"MAX_SPEED",.04);this.setBounceHeight(3),this.setBounceSpeed(.15),this.setBounceSquash(0)}getSpritesheetPosition(){return{x:this.facingLeft?64:96,y:160}}getSpriteSize(){return{width:32,height:32}}}const Z={[I.BerryBush]:{maxQuantity:10,color:"#cc2166",size:32,validTiles:[{type:c.Grass,weight:1},{type:c.Highlands,weight:.5}],spawnDensity:.005,sprite:{x:0,y:64,width:32,height:32},anchorBottom:!1,verticalOffset:0},[I.BerryPile]:{maxQuantity:3,color:"#cc2166",size:16,validTiles:[{type:c.Grass,weight:1},{type:c.Highlands,weight:1},{type:c.Sand,weight:1},{type:c.Dirt,weight:1}],spawnDensity:.001,sprite:{x:32,y:64,width:16,height:16},anchorBottom:!1,verticalOffset:-6},[I.BerryTree]:{maxQuantity:30,color:"#cc2166",size:32,validTiles:[{type:c.Highlands,weight:1}],spawnDensity:.003,sprite:{x:64,y:64,width:64,height:64},anchorBottom:!0,verticalOffset:-6},[I.Corpse]:{maxQuantity:50,color:"#4a4a4a",size:32,validTiles:[{type:c.Grass,weight:1},{type:c.Highlands,weight:1},{type:c.Sand,weight:1},{type:c.Dirt,weight:1}],spawnDensity:0,sprite:{x:32,y:0,width:32,height:32},anchorBottom:!1,verticalOffset:8},[I.Tree]:{maxQuantity:30,color:"#228B22",size:32,validTiles:[{type:c.Grass,weight:.5},{type:c.Highlands,weight:3}],spawnDensity:.01,sprite:{x:0,y:0,width:64,height:64},anchorBottom:!0,verticalOffset:-6}},W=class W{constructor(t,e,s){l(this,"x");l(this,"y");l(this,"type");l(this,"amount");l(this,"maxAmount");l(this,"config");if(this.x=t,this.y=e,this.type=s,this.config=JSON.parse(JSON.stringify(Z[s])),this.maxAmount=this.config.maxQuantity,this.amount=Math.floor(this.maxAmount*(.5+Math.random()*.5)),W.occupiedTiles.add(`${t},${e}`),s===I.Tree){const i=[{x:0,y:0},{x:64,y:0},{x:128,y:0}],r=i[Math.floor(Math.random()*i.length)];this.config.sprite.x=r.x,this.config.sprite.y=r.y,this.config.sprite.width=64,this.config.sprite.height=64}else if(s===I.BerryTree){const i=[{x:64,y:64},{x:128,y:64}],r=i[Math.floor(Math.random()*i.length)];this.config.sprite.x=r.x,this.config.sprite.y=r.y,this.config.sprite.width=64,this.config.sprite.height=64}}draw(t,e,s){const i=f.getSpritesheetSync();i!=null&&i.complete&&U.drawSprite(t,i,{...this.config.sprite,anchorBottom:this.config.anchorBottom,verticalOffset:this.config.verticalOffset},e,s,this.x,this.y)}getDrawOrder(){return this.x+this.y}getPosition(){return{x:this.x,y:this.y}}getType(){return this.type}getAmount(){return this.amount}getMaxAmount(){return this.maxAmount}harvest(t){console.log(`[Resource] Attempting to harvest ${t} from ${I[this.type]} at (${this.x}, ${this.y})`),console.log(`[Resource] Current amount: ${this.amount}, Max amount: ${this.maxAmount}`);const e=Math.min(this.amount,t);return this.amount-=e,console.log(`[Resource] Harvested ${e}, Remaining amount: ${this.amount}`),this.isDepleted()&&(console.log("[Resource] Resource depleted, removing from game state"),window.gameState.removeResource(this)),e}isDepleted(){return this.amount<=0}static canExistOnTile(t,e){return Z[t].validTiles.some(s=>s.type===e)}static getTileWeight(t,e){const s=Z[t].validTiles.find(i=>i.type===e);return s?s.weight:0}static generateResources(t){const e=[],s=t.length,r=t[0].length*s;return this.occupiedTiles.clear(),Object.entries(Z).forEach(([n,a])=>{if(a.spawnDensity>0){const h=Math.floor(r*a.spawnDensity);this.generateResourcesOfType(Number(n),h,t,e)}}),e}static generateResourcesOfType(t,e,s,i){const r=s[0].length,n=s.length,a=[];for(let g=0;g<n;g++)for(let y=0;y<r;y++){const u=s[g][y],v=this.getTileWeight(t,u);v>0&&!this.occupiedTiles.has(`${y},${g}`)&&a.push({x:y,y:g,weight:v})}const h=()=>{const g=a.reduce((u,v)=>u+v.weight,0);let y=Math.random()*g;for(let u=0;u<a.length;u++)if(y-=a[u].weight,y<=0)return a.splice(u,1)[0];return null};for(let g=0;g<e&&a.length>0;g++){const y=h();if(y){const u=`${y.x},${y.y}`;this.occupiedTiles.add(u),i.push(new W(y.x,y.y,t))}}}getColor(){return this.config.color}remove(){const t=`${this.x},${this.y}`;W.occupiedTiles.delete(t)}addAmount(t){this.amount=Math.min(this.maxAmount,this.amount+t)}};l(W,"occupiedTiles",new Set);let ht=W;var x=(o=>(o.Headquarters="Headquarters",o.Farm="Farm",o.Warehouse="Warehouse",o.Smithy="Smithy",o.House="House",o))(x||{});const Gt={[x.Headquarters]:{sprite:{x:128,y:128,width:64,height:64},verticalOffset:-16},[x.Farm]:{sprite:{x:128,y:128,width:64,height:64},verticalOffset:32},[x.Warehouse]:{sprite:{x:32,y:192,width:32,height:32},verticalOffset:0},[x.Smithy]:{sprite:{x:64,y:192,width:32,height:32},verticalOffset:0},[x.House]:{sprite:{x:96,y:192,width:32,height:32},verticalOffset:0}};class qt{constructor(t,e){l(this,"type");l(this,"position");l(this,"storage",new Map);l(this,"maxStorage",50);l(this,"constructionProgress",0);l(this,"isBuilt",!1);l(this,"config");this.type=t,this.position=e,this.config=Gt[t]}getType(){return this.type}getPosition(){return this.position}isComplete(){return this.isBuilt}addConstructionProgress(t){this.constructionProgress+=t,this.constructionProgress>=100&&(this.isBuilt=!0)}store(t,e){const s=this.storage.get(t)||0,i=this.maxStorage-this.getTotalStoredItems(),r=Math.min(e,i);return this.storage.set(t,s+r),r}retrieve(t,e){const s=this.storage.get(t)||0,i=Math.min(e,s);return this.storage.set(t,s-i),i}getTotalStoredItems(){return Array.from(this.storage.values()).reduce((t,e)=>t+e,0)}draw(t,e,s){const i=window.gameState.getSpritesheetSync();i!=null&&i.complete&&U.drawSprite(t,i,{x:this.config.sprite.x,y:this.config.sprite.y,width:this.config.sprite.width,height:this.config.sprite.height,anchorBottom:!0,verticalOffset:this.config.verticalOffset},e,s,this.position.x,this.position.y)}cleanup(){}}function Wt(o,t){var n;const s={[x.Headquarters]:[c.Grass,c.Highlands],[x.Farm]:[c.Grass,c.Dirt],[x.Warehouse]:[c.Grass,c.Dirt,c.Stone],[x.Smithy]:[c.Stone,c.Dirt],[x.House]:[c.Grass,c.Dirt]}[t];if(!s)return null;const i=o.length,r=((n=o[0])==null?void 0:n.length)||0;if(r===0||i===0)return null;for(let a=0;a<50;a++){const h=Math.floor(Math.random()*r),g=Math.floor(Math.random()*i);if(s.includes(o[g][h])){let y=!0;for(let u=-1;u<=1;u++){for(let v=-1;v<=1;v++){const d=h+v,T=g+u;if(d<0||d>=r||T<0||T>=i||o[T][d]===c.Water||o[T][d]===c.DeepWater){y=!1;break}}if(!y)break}if(y)return{x:h,y:g}}}return null}class Ut extends tt{constructor(e,s,i){super(e,s,i,["Wander","Graze","Follow"],"Cow");l(this,"MOVE_SPEED",5e-4);l(this,"MAX_SPEED",.005);l(this,"grazingAnimationTimer",0);l(this,"GRAZING_ANIMATION_INTERVAL",2e3);this.setBounceHeight(2),this.setBounceSpeed(.06),this.setBounceSquash(0),this.setBehavior("Wander")}getSpritesheetPosition(){const s=this.getBehavior()==="Graze"&&Math.floor(this.grazingAnimationTimer/this.GRAZING_ANIMATION_INTERVAL)%2===0;return{x:this.facingLeft?0:32,y:128-(s?32:0)}}getSpriteSize(){return{width:32,height:32}}}class zt{constructor(){l(this,"map",[]);l(this,"resources",[]);l(this,"structures",[]);l(this,"agents",[]);l(this,"spritesheet",null);l(this,"spritesheetLoadPromise",null);l(this,"selectedTile",null);l(this,"findableTiles",new Set);l(this,"forageableTiles",new Set);l(this,"fellableTiles",new Set);l(this,"fetchableTiles",new Set);l(this,"showFindableTiles",!0);l(this,"showForageableTiles",!0);l(this,"showFellableTiles",!0);l(this,"showFetchableTiles",!0);l(this,"resourceCounts",new Map([[C.Berries,0],[C.Wood,0],[C.Cream,0],[C.Stone,0]]))}isShowingFindableTiles(){return this.showFindableTiles}isShowingForageableTiles(){return this.showForageableTiles}isShowingFellableTiles(){return this.showFellableTiles}isShowingFetchableTiles(){return this.showFetchableTiles}toggleFindableTiles(){this.showFindableTiles=!this.showFindableTiles}toggleForageableTiles(){this.showForageableTiles=!this.showForageableTiles}toggleFellableTiles(){this.showFellableTiles=!this.showFellableTiles}toggleFetchableTiles(){this.showFetchableTiles=!this.showFetchableTiles}async loadSpritesheet(){return this.spritesheetLoadPromise?this.spritesheetLoadPromise:(this.spritesheetLoadPromise=new Promise((t,e)=>{const s=new Image;s.src="/BerriesAndCream/sprites.png",s.onload=()=>{console.log("Spritesheet loaded successfully"),this.spritesheet=s,t(s)},s.onerror=i=>{console.error("Failed to load spritesheet:",i),e(i)}}),this.spritesheetLoadPromise)}async getSpritesheet(){return this.spritesheet?this.spritesheet:this.loadSpritesheet()}getSpritesheetSync(){return this.spritesheet}addResource(t){this.resources.push(t),console.log("Resource added:",t)}removeResource(t){const e=this.resources.indexOf(t);e>-1&&(t.remove(),this.resources.splice(e,1),console.log("Resource removed:",t))}addStructure(t){this.structures.push(t),console.log("Structure added:",t)}removeStructure(t){const e=this.structures.indexOf(t);e>-1&&(this.structures.splice(e,1),console.log("Structure removed:",t))}getTileAt(t,e){var s;return t=Math.floor(t),e=Math.floor(e),t<0||t>=((s=this.map[0])==null?void 0:s.length)||e<0||e>=this.map.length?c.DeepWater:this.map[e][t]||c.DeepWater}setMap(t){this.map=t}getResources(){return this.resources}getStructures(){return this.structures}getMap(){return this.map}getMapWidth(){var t;return((t=this.map[0])==null?void 0:t.length)||0}getMapHeight(){return this.map.length||0}addAgent(t){this.agents.push(t),console.log("Agent added:",t)}removeAgent(t){var s;const e=this.agents.indexOf(t);e>-1&&((s=t.cleanup)==null||s.call(t),this.agents.splice(e,1),console.log("Agent removed:",t))}getAgents(){return this.agents}clearGameState(){this.agents.forEach(t=>{var e;return(e=t.cleanup)==null?void 0:e.call(t)}),this.resources.forEach(t=>t.remove()),this.structures.forEach(t=>{var e;return(e=t.cleanup)==null?void 0:e.call(t)}),this.agents=[],this.resources=[],this.structures=[],this.map=[],console.log("Game state cleared"),this.resetVisibility(),this.clearAllMarkedTiles()}generateInitialResources(){this.resources.forEach(e=>e.remove()),this.resources=[],ht.generateResources(this.map).forEach(e=>this.addResource(e))}generateInitialStructures(){const t=[{type:x.Headquarters,count:1}];this.structures.forEach(e=>{var s;return(s=e.cleanup)==null?void 0:s.call(e)}),this.structures=[],t.forEach(({type:e,count:s})=>{for(let i=0;i<s;i++){const r=Wt(this.map,e);if(r){const n=new qt(e,r);this.addStructure(n)}}})}generateInitialAgents(t=2){if(this.agents.forEach(s=>{var i;return(i=s.cleanup)==null?void 0:i.call(s)}),this.agents=[],!this.structures.find(s=>s.getType()===x.Headquarters)){console.warn("No headquarters found for agent spawning");return}for(let s=0;s<t;s++){const i=new $t(this.map);i&&this.addAgent(i)}for(let s=0;s<t;s++){const i=new Ut(this.map);i&&this.addAgent(i)}console.log(`Successfully placed ${this.agents.length} out of ${t} requested agents`)}getHQPosition(){const t=this.structures.find(e=>e.getType()===x.Headquarters);return t?t.getPosition():(console.warn("No headquarters found for agent spawning"),{x:0,y:0})}getSelectedTile(){return this.selectedTile}setSelectedTile(t){this.selectedTile=t}markTileAsFindable(t,e){this.findableTiles.add(`${t},${e}`)}getFindableTiles(){return this.showFindableTiles?Array.from(this.findableTiles).map(t=>{const[e,s]=t.split(",").map(Number);return{x:e,y:s}}):[]}clearFindableTiles(){this.findableTiles.clear()}markTileAsForageable(t,e){this.forageableTiles.add(`${t},${e}`)}clearForageableTiles(){this.forageableTiles.clear()}getForageableTiles(){return this.showForageableTiles?Array.from(this.forageableTiles).map(t=>{const[e,s]=t.split(",").map(Number);return{x:e,y:s}}):[]}markTileAsFellable(t,e){console.log("Marking tile as fellable:",t,e),this.fellableTiles.add(`${t},${e}`)}clearFellableTiles(){this.fellableTiles.clear()}getFellableTiles(){return this.showFellableTiles?Array.from(this.fellableTiles).map(t=>{const[e,s]=t.split(",").map(Number);return{x:e,y:s}}):[]}markTileAsFetchable(t,e){this.fetchableTiles.add(`${t},${e}`)}clearFetchableTiles(){this.fetchableTiles.clear()}getFetchableTiles(){return this.showFetchableTiles?Array.from(this.fetchableTiles).map(t=>{const[e,s]=t.split(",").map(Number);return{x:e,y:s}}):[]}clearAllMarkedTiles(){this.clearFindableTiles(),this.clearForageableTiles(),this.clearFellableTiles(),this.clearFetchableTiles()}resetVisibility(){this.showFindableTiles=!0,this.showForageableTiles=!0,this.showFellableTiles=!0,this.showFetchableTiles=!0}getResourceCount(t){return this.resourceCounts.get(t)||0}addToResourceCount(t,e){const s=this.resourceCounts.get(t)||0;this.resourceCounts.set(t,s+e)}removeFromResourceCount(t,e){const s=this.resourceCounts.get(t)||0;return s>=e?(this.resourceCounts.set(t,s-e),!0):!1}}const f=new zt;function j(o,t,e){const s=[];for(let i=-t;i<=t;i++)for(let r=-t;r<=t;r++)if((Math.abs(r)+Math.abs(i)+Math.sqrt(r*r+i*i))/3<=t){const a=o.x+r,h=o.y+i;a>=0&&a<e.getMapWidth()&&h>=0&&h<e.getMapHeight()&&s.push({x:a,y:h})}return s}const Yt={Forage:"FORAGE | Search for berries",Hunt:"HUNT | Search for animals",Rest:"REST | Regain health",Flush:"FLUSH | Drop off all resources at nearby base",Fell:"FELL | Chop down trees",Fetch:"FETCH | Fetch resources",Follow:"FOLLOW | Follow another agent",Idle:"IDLE | Do nothing"},rt={Find:"FIND | Mark tiles as findable",Forage:"Forageable tiles will have their berry resources collected when a little lad is set to forage.",Fell:"Fellable tiles to have their wood resources collected when a little lad is set to fell.",Fetch:"Fetchable tiles allow for cows residing there to follow little lads set to fetch, back to base."},Xt={createAgentCard(o,t){const e=o.getBehavior(),s=o.getAllowedBehaviors();return`
      <div class="agent-card" data-agent-index="${t}">
        <header class="agent-header">
          <h4>Agent ${t+1}</h4>
          <div class="behavior-controls">
            ${s.map(i=>`
              <button
                title="${Yt[i]||i}"
                class="behavior-button ${i.toLowerCase()} ${e===i?"active":""}" 
                data-behavior="${i}"
                data-agent-index="${t}"
              >
                ${te(i)}
              </button>
            `).join("")}
          </div>
          <button class="debug-toggle">▶</button>
        </header>
        <div class="debug-info">
          ${ut(o.getHealth(),"health")}
          ${lt(o.getInventory())}
          ${o.isStuck()?'<div class="status-warning">STUCK!</div>':""}
        </div>
      </div>
    `}};function Vt(o){const t=document.getElementById("infoPanel");if(!t)return;window.DEBUG.agentDebug=new Array(o.length).fill(!1);const e=o.map((i,r)=>Xt.createAgentCard(i,r)).join("");t.innerHTML=e;const s=document.createElement("div");s.className="hover-info-container",t.appendChild(s),o.forEach((i,r)=>{const n=t.querySelector(`[data-agent-index="${r}"]`);if(!n)return;const a=n.querySelector(".debug-toggle"),h=n.querySelector(".debug-info");a&&h&&(a.addEventListener("click",()=>{window.DEBUG.agentDebug[r]=!window.DEBUG.agentDebug[r],a.textContent=window.DEBUG.agentDebug[r]?"▼":"▶",h.classList.toggle("show",window.DEBUG.agentDebug[r]);const y=h.querySelector(".inventory-container");y&&(y.outerHTML=lt(i.getInventory())),console.log(`Debug toggled for agent ${r}:`,window.DEBUG.agentDebug[r])}),a.textContent=window.DEBUG.agentDebug[r]?"▼":"▶",h.classList.toggle("show",window.DEBUG.agentDebug[r]));const g=n.querySelectorAll(".behavior-button");g.forEach(y=>{y.addEventListener("click",u=>{const v=u.target,d=v.dataset.behavior;d&&(console.log("[UI] Button clicked:",{agentIndex:r,newBehavior:d,event:u}),window.changeBehavior(r,d),g.forEach(T=>T.classList.remove("active")),v.classList.add("active"))})}),i.addObserver({onHealthChange:y=>{if(window.DEBUG.agentDebug[r]){const u=n.querySelector(".debug-info");if(u){const v=u.querySelector(".stat-container");v&&(v.innerHTML=ut(y,"health"))}}},onInventoryChange:y=>{if(window.DEBUG.agentDebug[r]){const u=n.querySelector(".debug-info");if(u){const v=u.querySelector(".inventory-container");v&&(v.outerHTML=lt(y))}}},onStuckChange:y=>{if(window.DEBUG.agentDebug[r]){const u=n.querySelector(".debug-info");if(u){const v=u.querySelector(".status-warning");y&&!v?u.insertAdjacentHTML("beforeend",'<div class="status-warning">STUCK!</div>'):!y&&v&&v.remove()}}},onBehaviorChange:y=>{n.querySelectorAll(".behavior-button").forEach(v=>{const d=v.dataset.behavior;v.classList.toggle("active",d===y)})}})})}function ut(o,t,e){const s=Math.round(o/(e||100)*100),i=t==="amount",r=e&&e>10?"dotted":"segmented";return`
    <div class="stat-container">
      ${i?"":`<label>${t.charAt(0).toUpperCase()+t.slice(1)}</label>`}
      <div class="progress-bar ${t}" ${e?`style="--max-segments: ${e}"`:""} ${i?`data-style="${r}"`:""}>
        <div class="bar ${t}" style="width: ${s}%"></div>
      </div>
      <span class="value">${i?`${o}/${e}`:s+"%"}</span>
    </div>
  `}function lt(o){return`
    <div class="inventory-container">
      <h5>Inventory</h5>
      <div class="inventory-grid">
        ${o.map(t=>`
          <div class="inventory-slot ${t?"filled":"empty"}">
            ${t?`
              <div class="item ${t.type.toLowerCase()}">
                <span class="item-quantity">${t.quantity}</span>
                <span class="item-type">${t.type}</span>
              </div>
            `:""}
          </div>
        `).join("")}
      </div>
    </div>
  `}function Qt(){const o=document.createElement("div");o.className="hover-info-container",document.body.appendChild(o)}function Kt(){const o=document.querySelector("body");if(!o)return;const t=document.createElement("div");t.className="selected-tile-panel",t.innerHTML=`
    <div class="selected-tile-content">
    </div>
  `,t.style.display="none",o.appendChild(t)}function Zt(o,t){const e=document.querySelector(".selected-tile-content"),s=document.querySelector(".selected-tile-panel");if(!e||!s)return;if(!o){s&&(s.style.display="none");return}const i=t.getResources().filter(n=>{const a=n.getPosition();return a.x===o.x&&a.y===o.y});if(i.length===0){s&&(s.style.display="none");return}s.style.display="block";let r="";i.length>0&&(r=`
      <div class="resources-info">
        ${i.length===0?"<p>No resources at this tile</p>":""}
        ${i.map(n=>`
          <div class="resource-item">
            <div class="resource-type">${I[n.getType()]} </div>
            <div class="resource-amount">
              ${ut(n.getAmount(),"amount",n.getMaxAmount())}
            </div>
          </div>
        `).join("")}
      </div>
    `),e.innerHTML=`
    ${r}
  `}function jt(){const o=document.querySelector("body");if(!o)return;const t=document.createElement("div");t.className="action-panel",t.innerHTML=`
    <div class="action-group">
      <button class="toggle-button forage-toggle" data-active="true">👁
        <span class="tooltip">Toggle visibility of forageable tiles.</span>
      </button>
      <button class="action-button forage-button">Forage
        <span class="tooltip">${rt.Forage}</span>
      </button>
      <button class="toggle-button forage-clear">✕
        <span class="tooltip">Clear all forageable tiles.</span>
      </button>
    </div>
    <div class="action-group">
      <button class="toggle-button fell-toggle" data-active="true">👁
        <span class="tooltip">Toggle visibility of fellable tiles.</span>
      </button>
      <button class="action-button fell-button">Fell
        <span class="tooltip">${rt.Fell}</span>
      </button>
      <button class="toggle-button fell-clear">✕
        <span class="tooltip">Clear all fellable tiles.</span>
      </button>
    </div>
    <div class="action-group">
      <button class="toggle-button fetch-toggle" data-active="true">👁
        <span class="tooltip">Toggle visibility of fetchable tiles.</span>
      </button>
      <button class="action-button fetch-button"">Fetch
        <span class="tooltip">${rt.Fetch}</span>
      </button>
      <button class="toggle-button fetch-clear">✕
        <span class="tooltip">Clear all fetchable tiles.</span>
      </button>
    </div>
    <div class="separator"></div>
    <button class="action-button clear-all-button">Clear All (C)</button>
  `,o.appendChild(t),window.DEBUG.showFindableTiles=!0,window.DEBUG.showForageableTiles=!0,window.DEBUG.showFellableTiles=!0,window.DEBUG.showFetchableTiles=!0;const e=t.querySelector(".find-toggle"),s=t.querySelector(".forage-toggle"),i=t.querySelector(".fell-toggle"),r=t.querySelector(".fetch-toggle");e==null||e.addEventListener("click",()=>{const m=e;f.toggleFindableTiles(),m.dataset.active=f.isShowingFindableTiles().toString()}),s==null||s.addEventListener("click",()=>{const m=s;f.toggleForageableTiles(),m.dataset.active=f.isShowingForageableTiles().toString()}),i==null||i.addEventListener("click",()=>{const m=i;f.toggleFellableTiles(),m.dataset.active=f.isShowingFellableTiles().toString()}),r==null||r.addEventListener("click",()=>{const m=r;f.toggleFetchableTiles(),m.dataset.active=f.isShowingFetchableTiles().toString()});const n=t.querySelector(".find-button"),a=t.querySelector(".forage-button"),h=t.querySelector(".fell-button"),g=t.querySelector(".fetch-button"),y=t.querySelector(".clear-all-button");n&&n.addEventListener("click",()=>{const m=f.getSelectedTile();if(!m)return;j(m,8,f).forEach(w=>{f.markTileAsFindable(w.x,w.y),f.isShowingFindableTiles()||(f.toggleFindableTiles(),e&&(e.dataset.active="true"))})}),a&&a.addEventListener("click",()=>{const m=f.getSelectedTile();if(!m)return;j(m,5,f).forEach(w=>{f.markTileAsForageable(w.x,w.y),f.isShowingForageableTiles()||(f.toggleForageableTiles(),s&&(s.dataset.active="true"))})}),h&&h.addEventListener("click",()=>{const m=f.getSelectedTile();if(!m)return;j(m,5,f).forEach(w=>{f.markTileAsFellable(w.x,w.y),f.isShowingFellableTiles()||(f.toggleFellableTiles(),i&&(i.dataset.active="true"))})}),g&&g.addEventListener("click",()=>{const m=f.getSelectedTile();if(!m)return;j(m,5,f).forEach(w=>{f.markTileAsFetchable(w.x,w.y),f.isShowingFetchableTiles()||(f.toggleFetchableTiles(),r&&(r.dataset.active="true"))})}),y&&y.addEventListener("click",()=>{f.clearAllMarkedTiles()}),document.addEventListener("keydown",m=>{if(!(m.target instanceof HTMLInputElement||m.target instanceof HTMLTextAreaElement))switch(m.key){case"1":n.click();break;case"2":a.click();break;case"3":h.click();break;case"4":g.click();break;case"c":y.click();break}});const u=t.querySelector(".find-clear"),v=t.querySelector(".forage-clear"),d=t.querySelector(".fell-clear"),T=t.querySelector(".fetch-clear");u==null||u.addEventListener("click",()=>{f.clearFindableTiles()}),v==null||v.addEventListener("click",()=>{f.clearForageableTiles()}),d==null||d.addEventListener("click",()=>{f.clearFellableTiles()}),T==null||T.addEventListener("click",()=>{f.clearFetchableTiles()})}function Jt(){const o=document.createElement("div");o.className="resource-counter",o.innerHTML=`
    <div class="resource-totals">
      <div class="resource-item">
        <span class="icon">🫐</span>
        <span class="count berries">0</span>
      </div>
      <div class="resource-item">
        <span class="icon">🪵</span>
        <span class="count wood">0</span>
      </div>
      <div class="resource-item">
        <span class="icon">🥛</span>
        <span class="count cream">0</span>
      </div>
      <div class="resource-item">
        <span class="icon">🪨</span>
        <span class="count stone">0</span>
      </div>
    </div>
  `,document.body.appendChild(o),setInterval(()=>{const t=o.querySelector(".count.berries"),e=o.querySelector(".count.wood"),s=o.querySelector(".count.cream"),i=o.querySelector(".count.stone");t&&(t.textContent=f.getResourceCount(C.Berries).toString()),e&&(e.textContent=f.getResourceCount(C.Wood).toString()),s&&(s.textContent=f.getResourceCount(C.Cream).toString()),i&&(i.textContent=f.getResourceCount(C.Stone).toString())},100)}function te(o){return{Forage:"🫐",Hunt:"🏹",Rest:"💤",Flush:"🚽",Fell:"🪓",Fetch:"🐄",Follow:"👣",Idle:"💭"}[o]||o[0]}const ee=()=>{const o=document.getElementById("helperTextWrapper");if(!o)return;const t=o.querySelectorAll(".helptext");let e=0;o.dataset.counter="0",t[0].style.display="flex",setInterval(()=>{t.forEach((s,i)=>{s.style.display=i===e?"flex":"none"}),e=(e+1)%t.length,o.dataset.counter=e.toString()},1e4)};class se{static sortDrawables(t){return t.sort((e,s)=>{var n,a;const i=((n=e.getDrawOrder)==null?void 0:n.call(e))??e.getPosition().x+e.getPosition().y,r=((a=s.getDrawOrder)==null?void 0:a.call(s))??s.getPosition().x+s.getPosition().y;return i-r})}static render(t,e){this.sortDrawables(e).forEach(i=>{const r=i.getPosition(),n=U.worldToScreen(r.x,r.y);i.draw(t,n.x,n.y)})}}class G{constructor(t,e=4){l(this,"boundary");l(this,"capacity");l(this,"points");l(this,"divided");l(this,"northwest");l(this,"northeast");l(this,"southwest");l(this,"southeast");this.boundary=t,this.capacity=e,this.points=[],this.divided=!1}subdivide(){const t=this.boundary.x,e=this.boundary.y,s=this.boundary.width/2,i=this.boundary.height/2,r={x:t,y:e,width:s,height:i},n={x:t+s,y:e,width:s,height:i},a={x:t,y:e+i,width:s,height:i},h={x:t+s,y:e+i,width:s,height:i};this.northwest=new G(r,this.capacity),this.northeast=new G(n,this.capacity),this.southwest=new G(a,this.capacity),this.southeast=new G(h,this.capacity),this.divided=!0}insert(t){return this.contains(t)?this.points.length<this.capacity&&!this.divided?(this.points.push(t),!0):(this.divided||this.subdivide(),this.northwest.insert(t)||this.northeast.insert(t)||this.southwest.insert(t)||this.southeast.insert(t)):!1}query(t){const e=[];if(!this.intersects(t,this.boundary))return e;for(const s of this.points)this.pointInRange(s,t)&&e.push(s);return this.divided&&(e.push(...this.northwest.query(t)),e.push(...this.northeast.query(t)),e.push(...this.southwest.query(t)),e.push(...this.southeast.query(t))),e}clear(){this.points=[],this.divided&&(this.northwest=void 0,this.northeast=void 0,this.southwest=void 0,this.southeast=void 0,this.divided=!1)}contains(t){return t.x>=this.boundary.x&&t.x<this.boundary.x+this.boundary.width&&t.y>=this.boundary.y&&t.y<this.boundary.y+this.boundary.height}pointInRange(t,e){return t.x>=e.x&&t.x<e.x+e.width&&t.y>=e.y&&t.y<e.y+e.height}intersects(t,e){return!(t.x+t.width<e.x||e.x+e.width<t.x||t.y+t.height<e.y||e.y+e.height<t.y)}}class ie{constructor(t,e){l(this,"heightMap");l(this,"width");l(this,"height");this.width=t,this.height=e,this.heightMap=[];for(let n=0;n<e;n++){this.heightMap[n]=[];for(let a=0;a<t;a++)this.heightMap[n][a]=Math.floor(Math.random()*100)+1}const s=10,i=30,r=[];for(let n=0;n<s;n++){let a,h,g=0;const y=50;do{a=Math.floor(Math.random()*t),h=Math.floor(Math.random()*e);const M=r.some(B=>{const E=Math.min(Math.abs(a-B.x),t-Math.abs(a-B.x)),P=Math.min(Math.abs(h-B.y),e-Math.abs(h-B.y));return Math.sqrt(E*E+P*P)<i});if(g++,g>=y)break;if(!M){r.push({x:a,y:h});break}}while(!0);const u=6,v=140+Math.random()*40;for(let M=-u;M<=u;M++)for(let B=-u;B<=u;B++){const E=Math.sqrt(B*B+M*M);if(E<=u){const P=(a+B+t)%t,D=(h+M+e)%e,N=v*Math.pow(1-E/u,1.2);this.heightMap[D][P]=Math.max(this.heightMap[D][P],N)}}const d=3+Math.floor(Math.random()*3),T=4+Math.floor(Math.random()*3),m=12,S=25,w=Math.PI*2/d;for(let M=0;M<d;M++){let B=a,E=h,P=v*.9;const D=M*w+Math.random()*w*.5;for(let N=0;N<T;N++){const X=Math.PI/6,gt=D+(Math.random()*X-X/2),it=m+Math.random()*(S-m),ft=Math.floor(B+Math.cos(gt)*it),yt=Math.floor(E+Math.sin(gt)*it),pt=Math.floor(it*2);for(let ot=0;ot<pt;ot++){const K=ot/pt,Pt=Math.floor((B*(1-K)+ft*K+t)%t),Ft=Math.floor((E*(1-K)+yt*K+e)%e),$=4;for(let V=-$;V<=$;V++)for(let Q=-$;Q<=$;Q++){const vt=Math.sqrt(Q*Q+V*V);if(vt<=$){const mt=(Pt+Q+t)%t,Tt=(Ft+V+e)%e,At=P*Math.pow(1-vt/$,1.5);this.heightMap[Tt][mt]=Math.max(this.heightMap[Tt][mt],At)}}}B=ft,E=yt,P*=.75}}}}smooth(t=3){for(let s=0;s<t;s++){const i=Array(this.height).fill(0).map(()=>Array(this.width).fill(0));for(let r=0;r<this.height;r++)for(let n=0;n<this.width;n++){let a=0,h=0;for(let g=-3;g<=3;g++)for(let y=-3;y<=3;y++){const u=Math.sqrt(y*y+g*g);if(u<=3){const v=(n+y+this.width)%this.width,d=(r+g+this.height)%this.height,T=Math.exp(-(u*u)/(2*(3*.5)*(3*.5)));a+=this.heightMap[d][v]*T,h+=T}}i[r][n]=a/h}this.heightMap=i}}getValue(t,e){return this.heightMap[e][t]/100}quadraticBezier(t,e,s,i){const r=Math.round((1-i)*(1-i)*t.x+2*(1-i)*i*e.x+i*i*s.x),n=Math.round((1-i)*(1-i)*t.y+2*(1-i)*i*e.y+i*i*s.y);return{x:r,y:n}}generateControlPoints(t,e){const s=[];let i=t,r=e;s.push({x:i,y:r});const n=2+Math.floor(Math.random()*3);for(let a=0;a<n;a++){let h=i,g=r,y=1/0;const u=20;for(let v=0;v<10;v++){const d=(i+(Math.random()*2-1)*u+this.width)%this.width,T=(r+(Math.random()*2-1)*u+this.height)%this.height,m=this.heightMap[Math.floor(T)][Math.floor(d)];m<y&&(y=m,h=d,g=T)}i=h,r=g,s.push({x:i,y:r})}return s}carveRiverPath(t,e,s=2,i=.15,r=0){if(r>3)return;const n=this.generateControlPoints(t,e);let a=s;for(let h=0;h<n.length-2;h++){const g=n[h],y=n[h+1],u=n[h+2];if(!g||!y||!u)continue;const v=50;for(let d=0;d<=v;d++){const T=d/v,m=this.quadraticBezier(g,y,u,T);if(m.x<0||m.x>=this.width||m.y<0||m.y>=this.height)continue;const S=Math.max(1,a*(1-d/v*.2));for(let w=-S;w<=S;w++)for(let M=-S;M<=S;M++){const B=Math.floor((m.x+M+this.width)%this.width),E=Math.floor((m.y+w+this.height)%this.height);if(B<0||B>=this.width||E<0||E>=this.height)continue;const P=Math.sqrt(M*M+w*w);if(P<=S){const D=15+(S-P);this.heightMap[E][B]=Math.min(this.heightMap[E][B],D)}}if(Math.random()<i&&a>2){const w=Math.floor(m.x),M=Math.floor(m.y);if(w>=0&&w<this.width&&M>=0&&M<this.height){const B=a*.7,E=i*.5;this.carveRiverPath(w,M,B,E,r+1)}}}a*=.9}}generateRivers(){let t=0,e=0,s=0;for(let r=0;r<50;r++){const n=Math.floor(Math.random()*this.width),a=Math.floor(Math.random()*this.height),h=this.heightMap[a][n];h>s&&h>80&&(s=h,t=n,e=a)}this.carveRiverPath(t,e,3,.15)}}function oe(o,t){const e=new ie(o,t);e.generateRivers(),e.smooth(4);const s=[];for(let i=0;i<t;i++){s[i]=[];for(let r=0;r<o;r++){const n=e.getValue(r,i);n<.08?s[i][r]=c.DeepWater:n<.15?s[i][r]=c.Water:n<.18?s[i][r]=c.Sand:n<.65?s[i][r]=c.Grass:n<.75?s[i][r]=c.Highlands:n<.85?s[i][r]=c.Dirt:n<.92?s[i][r]=c.Stone:s[i][r]=c.Snow}}return s}let H,b,A,k;const z=100,Y=100,p=16;let L=0,R=0;window.DEBUG={isPaused:!1,showFindableTiles:!1,showForageableTiles:!1,showFellableTiles:!1,showFetchableTiles:!1,agentDebug:[],toggleAgentDebug:o=>{window.DEBUG.agentDebug[o]=!window.DEBUG.agentDebug[o],dt(),console.log(`Toggled debug for agent ${o}:`,window.DEBUG.agentDebug[o])}};const nt=new G({x:0,y:0,width:z,height:Y});function Mt(){window.DEBUG.isPaused||(nt.clear(),f.getAgents().forEach(o=>{if(o&&!o.isDead()){o.update();const t=o.getPosition();nt.insert({x:t.x,y:t.y,data:o})}}),f.getAgents().forEach(o=>{if(o&&!o.isDead()){const t=o.getPosition(),e=2;nt.query({x:t.x-e,y:t.y-e,width:e*2,height:e*2}).filter(r=>r.data!==o).map(r=>r.data).forEach(r=>{const n=r.getPosition(),a=t.x-n.x,h=t.y-n.y,g=Math.sqrt(a*a+h*h),y=1;if(g<y){const u=a/g,v=h/g,d=v,T=-u,m=o.getVelocity(),S=r.getVelocity(),w=m.x-S.x,M=m.y-S.y,B=y-g,E=u*w+v*M,P=Math.max(.3,B*.8-E*.5),D=.4,N=u*P+d*D,X=v*P+T*D;o.applyForce(N,X),r.applyForce(-N,-X)}})}})),Bt(),requestAnimationFrame(Mt)}function Bt(){b.clearRect(0,0,H.width,H.height),b.save(),b.translate(H.width/2,100),pe(b),L>=0&&L<f.getMapWidth()&&R>=0&&R<f.getMapHeight()&&de(b,L,R),ye(b);const o=[...f.getResources(),...f.getStructures(),...f.getAgents().filter(t=>!t.isDead())];se.render(b,o),b.restore(),f.getAgents().forEach(t=>{if(t&&!t.isDead()){const e=t.getCurrentPath();e.length>0&&ge(t,e)}})}function Et(){const o=document.querySelector(".agent-container");o&&(o.innerHTML=""),f.clearGameState();const t=oe(z,Y);f.setMap(t),f.generateInitialResources(),f.generateInitialStructures(),f.generateInitialAgents(2),Vt(f.getAgents()),Kt(),Qt(),setTimeout(()=>{ee()},2e3),jt(),he(t),Bt()}ae();var St;(St=document.getElementById("generateMap"))==null||St.addEventListener("click",Et);function re(){const o=(z+Y)*p,t=(z+Y)*(p/2),e=document.createElement("canvas");e.width=o,e.height=t+200,e.style.cssText=`
    position: absolute;
    top: 0;
    left: 0;
  `;const s=e.getContext("2d"),i=document.createElement("canvas");i.width=o,i.height=t+200,i.style.cssText=`
    position: absolute;
    top: 0;
    left: 0;
  `;const r=i.getContext("2d");return i.addEventListener("mousemove",ne),i.addEventListener("click",fe),{mainCanvas:i,backgroundCanvas:e,mainCtx:r,backgroundCtx:s}}function ne(o){if(!H||!f)return;const t=H.getBoundingClientRect(),e=o.clientX-t.left-H.width/2,s=o.clientY-t.top-100,i=Math.floor((e/p+s/(p/2))/2),r=Math.floor((s/(p/2)-e/p)/2),n=f.getTileAt(i,r);let a=0;switch(n){case c.DeepWater:a=0;break;case c.Water:a=.15;break;case c.Sand:a=.3;break;case c.Grass:a=.45;break;case c.Highlands:a=.6;break;case c.Dirt:a=.75;break;case c.Stone:a=.9;break;case c.Snow:a=1;break}const h=a*p,g=s+h;L=Math.floor((e/p+g/(p/2))/2),R=Math.floor((g/(p/2)-e/p)/2),dt()}async function ae(){var r,n,a;const{mainCanvas:o,backgroundCanvas:t,mainCtx:e,backgroundCtx:s}=re();H=o,b=e,A=t,k=s;const i=document.createElement("div");i.id="infoPanel",(r=document.querySelector(".ui"))==null||r.appendChild(i),(n=document.getElementById("app"))==null||n.appendChild(A),(a=document.getElementById("app"))==null||a.appendChild(H),await f.loadSpritesheet(),Et(),ve(),requestAnimationFrame(Mt),requestAnimationFrame(ct)}function dt(){const o=document.querySelector(".tile-info");if(!(!o||!f)&&L>=0&&R>=0&&L<z&&R<Y){const t=f.getTileAt(L,R),e=`
      <p class="tile-info">${c[t]} (${L}, ${R})</p>
    `;o.outerHTML=e}}function he(o){k.clearRect(0,0,A.width,A.height);const t=k.createLinearGradient(0,0,0,A.height);t.addColorStop(0,"rgba(52, 245, 255, 0.94)"),t.addColorStop(1,"rgba(255, 81, 0, 0.65)"),k.fillStyle=t,k.fillRect(0,0,A.width,A.height);const e=k.createRadialGradient(A.width/2,A.height/2,0,A.width/2,A.height/2,A.width/2);e.addColorStop(0,"rgba(87, 87, 87, 0.88)"),e.addColorStop(.3,"rgba(44, 44, 44, 0.7)"),e.addColorStop(1,"rgba(0, 0, 0, 0.93)"),k.fillStyle=e,k.fillRect(0,0,A.width,A.height),k.save(),k.translate(A.width/2,100);for(let s=0;s<Y;s++)for(let i=0;i<z;i++){const r=(i-s)*p,n=(i+s)*(p/2);ue(k,r,n,o[s][i])}k.restore()}function le(o){o.forEach(t=>{const e=t.position.x*p,s=t.position.y*p;t.isInPath?(b.fillStyle="rgba(0, 255, 0, 0.5)",b.fillRect(e,s,p,p)):t.isExplored?(b.fillStyle="rgba(255, 0, 0, 0.3)",b.fillRect(e,s,p,p)):t.isInOpenSet&&(b.fillStyle="rgba(0, 0, 255, 0.3)",b.fillRect(e,s,p,p))})}const ce=new st;ce.setVisualizationCallback(o=>{le(o)});function at(o,t){const e=document.createElement("canvas");e.width=4,e.height=4;const s=e.getContext("2d");if(!s)return null;s.fillStyle=o,s.fillRect(0,0,e.width,e.height);for(let r=0;r<e.height;r++)for(let n=0;n<e.width;n++){const a=(Math.random()-.5)*(t/2);s.fillStyle=O(o,a),s.fillRect(n,r,1,1)}const i=b.createPattern(e,"repeat");return i||(console.warn("Failed to create pattern, falling back to base color"),null)}function ue(o,t,e,s){const i=p*2,r=p,n=Math.PI*.25;let a,h,g=[];switch(s){case c.DeepWater:a="#1a5f7a",h=at(a,10)||void 0;for(let d=0;d<4;d++)g.push({x:Math.random()*i-i/2,y:Math.random()*r,size:1.5,color:"rgba(41, 128, 185, 0.3)"});break;case c.Water:a="#2980b9",h=at(a,8)||void 0;for(let d=0;d<3;d++)g.push({x:Math.random()*i-i/2,y:Math.random()*r,size:1,color:"rgba(255, 255, 255, 0.15)"});break;case c.Sand:a="#e4d03b";for(let d=0;d<5;d++)g.push({x:Math.random()*i-i/2,y:Math.random()*r,size:1,color:O(a,-20)});break;case c.Grass:a="#2ecc71";for(let d=0;d<15;d++){const T=Math.random()*i-i/2,m=Math.random()*r,S=n+(Math.random()*.4-.2),w=2+Math.random()*2;g.push({x:T,y:m,angle:S,length:w,color:O(a,Math.random()*20-10)})}break;case c.Highlands:a="#207346";for(let d=0;d<12;d++){const T=Math.random()*i-i/2,m=Math.random()*r,S=n+(Math.random()*.6-.3),w=4+Math.random()*4;g.push({x:T,y:m,angle:S,length:w,color:O(a,Math.random()*20-10)})}break;case c.Dirt:a="#8b4513",h=at(a,15)||void 0;for(let d=0;d<4;d++)g.push({x:Math.random()*i-i/2,y:Math.random()*r,size:1,color:O(a,-10)});break;case c.Stone:a="#6c7a89";for(let d=0;d<3;d++){const T=Math.random()*i-i/2,m=Math.random()*r,S=[],w=5+Math.floor(Math.random()*3),M=2+Math.random()*2;for(let E=0;E<w;E++){const P=E/w*Math.PI*2,D=M*(.7+Math.random()*.3);S.push({x:T+Math.cos(P)*D,y:m+Math.sin(P)*D})}const B=d%2===0?-35-Math.random()*10:25+Math.random()*10;g.push({points:S,color:O(a,B)})}break;case c.Snow:a="#ffffff";for(let d=0;d<3;d++)g.push({x:Math.random()*i-i/2,y:Math.random()*r,size:1,color:"#e6f3ff"});break}let y=0;switch(s){case c.DeepWater:y=0;break;case c.Water:y=.15;break;case c.Sand:y=.3;break;case c.Grass:y=.45;break;case c.Highlands:y=.6;break;case c.Dirt:y=.75;break;case c.Stone:y=.9;break;case c.Snow:y=1;break}const u=y*r;o.beginPath(),o.moveTo(t-i/2,e+r/2-u),o.lineTo(t-i/2,e+r/2),o.lineTo(t,e+r),o.lineTo(t,e+r-u),o.closePath(),s===c.Dirt?o.fillStyle=O(a,30):o.fillStyle=h||O(a,20),o.fill(),o.beginPath(),o.moveTo(t+i/2,e+r/2-u),o.lineTo(t+i/2,e+r/2),o.lineTo(t,e+r),o.lineTo(t,e+r-u),o.closePath(),s===c.Dirt?o.fillStyle=O(a,-40):o.fillStyle=h||O(a,-20),o.fill(),o.beginPath(),o.moveTo(t,e-u),o.lineTo(t+i/2,e+r/2-u),o.lineTo(t,e+r-u),o.lineTo(t-i/2,e+r/2-u),o.closePath(),c.Dirt,o.fillStyle=h||a,o.fill(),g.sort((d,T)=>"isShadow"in d&&"isShadow"in T?d.isShadow?-1:1:0).forEach(d=>{"angle"in d?(o.beginPath(),o.moveTo(t+d.x,e+d.y-u),o.lineTo(t+d.x+Math.cos(d.angle)*d.length,e+d.y-u-Math.sin(d.angle)*d.length),o.strokeStyle=d.color,o.lineWidth=1,o.stroke()):"points"in d?(o.beginPath(),d.points.forEach((T,m)=>{m===0?o.moveTo(t+T.x,e+T.y-u):o.lineTo(t+T.x,e+T.y-u)}),o.closePath(),o.fillStyle=d.color,o.fill(),o.strokeStyle="rgba(0,0,0,0.1)",o.stroke()):"size"in d&&(o.beginPath(),o.arc(t+d.x,e+d.y-u,d.size,0,Math.PI*2),o.fillStyle=d.color,o.fill())}),o.strokeStyle="rgba(0,0,0,0.1)",o.stroke(),(s===c.Water||s===c.DeepWater)&&(o.fillStyle=h||O(a,-10),o.fill(),o.fillStyle=h||O(a,10),o.fill(),o.beginPath(),o.moveTo(t,e-u),o.lineTo(t+i/4,e+r/4-u),o.strokeStyle="rgba(255,255,255,0.1)",o.lineWidth=.5,o.stroke()),s===c.Water||s===c.DeepWater?o.strokeStyle="rgba(0,0,0,0.05)":o.strokeStyle="rgba(0,0,0,0.1)",o.stroke()}function O(o,t){let e=parseInt(o.slice(1,3),16),s=parseInt(o.slice(3,5),16),i=parseInt(o.slice(5,7),16);e=Math.min(255,Math.max(0,e+t)),s=Math.min(255,Math.max(0,s+t)),i=Math.min(255,Math.max(0,i+t));const r=e.toString(16).padStart(2,"0"),n=s.toString(16).padStart(2,"0"),a=i.toString(16).padStart(2,"0");return`#${r}${n}${a}`}function de(o,t,e){const s=p*2,i=p,r=window.gameState.getTileAt(t,e);let n=0;switch(r){case c.DeepWater:n=0;break;case c.Water:n=.15;break;case c.Sand:n=.3;break;case c.Grass:n=.45;break;case c.Highlands:n=.6;break;case c.Dirt:n=.75;break;case c.Stone:n=.9;break;case c.Snow:n=1;break}const a=n*i,h=(t-e)*p,g=(t+e)*(p/2)-a;o.beginPath(),o.moveTo(h,g),o.lineTo(h+s/2,g+i/2),o.lineTo(h,g+i),o.lineTo(h-s/2,g+i/2),o.closePath(),o.strokeStyle="rgba(255, 255, 255, 0.5)",o.lineWidth=2,o.stroke(),o.fillStyle="rgba(255, 255, 255, 0.1)",o.fill()}window.gameState=f;window.changeBehavior=(o,t)=>{f.getAgents()[o]&&(f.getAgents()[o].setNewBehavior(t),console.log(`Changed agent ${o} behavior to ${t}`))};function ge(o,t){const e=f.getAgents().indexOf(o);if(!window.DEBUG.agentDebug[e])return;const s=o.getPosition();b.save(),b.translate(H.width/2,100),b.beginPath();const i=(s.x-s.y)*p,r=(s.x+s.y)*(p/2);b.moveTo(i,r),t.forEach(n=>{const a=(n.x-n.y)*p,h=(n.x+n.y)*(p/2);b.lineTo(a,h)}),b.strokeStyle="rgba(0, 42, 255, 0.62)",b.lineWidth=1,b.stroke(),t.forEach(n=>{const a=(n.x-n.y)*p,h=(n.x+n.y)*(p/2);b.beginPath(),b.arc(a,h,2,0,Math.PI*2),b.fillStyle="rgba(0, 170, 255, 0.61)",b.fill()}),b.restore()}function fe(o){if(!H||!f)return;const t=H.getBoundingClientRect(),e=o.clientX-t.left-H.width/2,s=o.clientY-t.top-100,i=Math.floor((e/p+s/(p/2))/2),r=Math.floor((s/(p/2)-e/p)/2),n=f.getTileAt(i,r);let a=0;switch(n){case c.DeepWater:a=0;break;case c.Water:a=.15;break;case c.Sand:a=.3;break;case c.Grass:a=.45;break;case c.Highlands:a=.6;break;case c.Dirt:a=.75;break;case c.Stone:a=.9;break;case c.Snow:a=1;break}const h=a*p,g=s+h,y=Math.floor((e/p+g/(p/2))/2),u=Math.floor((g/(p/2)-e/p)/2);if(y>=0&&y<f.getMapWidth()&&u>=0&&u<f.getMapHeight()){const v=f.getSelectedTile();v&&v.x===y&&v.y===u?f.setSelectedTile(null):f.setSelectedTile({x:y,y:u}),dt(),Zt(f.getSelectedTile(),f)}}function ye(o){const t=f.getSelectedTile();if(!t)return;const{x:e,y:s}=t,i=f.getTileAt(e,s);let r=0;switch(i){case c.DeepWater:r=0;break;case c.Water:r=.15;break;case c.Sand:r=.3;break;case c.Grass:r=.45;break;case c.Highlands:r=.6;break;case c.Dirt:r=.75;break;case c.Stone:r=.9;break;case c.Snow:r=1;break}const n=r*p,a=(e-s)*p,h=(e+s)*(p/2)-n;o.beginPath(),o.moveTo(a,h),o.lineTo(a+p,h+p/2),o.lineTo(a,h+p),o.lineTo(a-p,h+p/2),o.closePath(),o.strokeStyle="rgba(255, 255, 255, 0.8)",o.lineWidth=3,o.stroke();const g=Math.sin(Date.now()/500)*.2+.4;o.fillStyle=`rgba(255, 255, 255, ${g})`,o.fill()}function pe(o){o.beginPath(),window.DEBUG.showFindableTiles&&f.getFindableTiles().forEach(t=>{const e=f.getTileAt(t.x,t.y),i=J(e)*p,r=(t.x-t.y)*p,n=(t.x+t.y)*(p/2)-i;o.moveTo(r,n),o.lineTo(r+p,n+p/2),o.lineTo(r,n+p),o.lineTo(r-p,n+p/2),o.closePath()}),o.fillStyle="rgba(0, 255, 255, 0.3)",o.fill(),o.beginPath(),window.DEBUG.showForageableTiles&&f.getForageableTiles().forEach(t=>{const e=f.getTileAt(t.x,t.y),i=J(e)*p,r=(t.x-t.y)*p,n=(t.x+t.y)*(p/2)-i;o.moveTo(r,n),o.lineTo(r+p,n+p/2),o.lineTo(r,n+p),o.lineTo(r-p,n+p/2),o.closePath()}),o.fillStyle="rgba(255, 165, 0, 0.3)",o.fill(),o.beginPath(),window.DEBUG.showFellableTiles&&f.getFellableTiles().forEach(t=>{const e=f.getTileAt(t.x,t.y),i=J(e)*p,r=(t.x-t.y)*p,n=(t.x+t.y)*(p/2)-i;o.moveTo(r,n),o.lineTo(r+p,n+p/2),o.lineTo(r,n+p),o.lineTo(r-p,n+p/2),o.closePath()}),o.fillStyle="rgba(128, 128, 128, 0.3)",o.fill(),o.beginPath(),window.DEBUG.showFetchableTiles&&f.getFetchableTiles().forEach(t=>{const e=f.getTileAt(t.x,t.y),i=J(e)*p,r=(t.x-t.y)*p,n=(t.x+t.y)*(p/2)-i;o.moveTo(r,n),o.lineTo(r+p,n+p/2),o.lineTo(r,n+p),o.lineTo(r-p,n+p/2),o.closePath()}),o.fillStyle="rgba(255, 192, 203, 0.6)",o.fill()}function J(o){switch(o){case c.DeepWater:return 0;case c.Water:return .15;case c.Sand:return .3;case c.Grass:return .45;case c.Highlands:return .6;case c.Dirt:return .75;case c.Stone:return .9;case c.Snow:return 1;default:return 0}}let wt=3,F={x:0,y:0};function ct(){const o=document.getElementById("app");if(!o)return requestAnimationFrame(ct);(F.x!==0||F.y!==0)&&o.scroll({left:o.scrollLeft+F.x*wt,top:o.scrollTop+F.y*wt,behavior:"instant"}),requestAnimationFrame(ct)}const q=new Set;function ve(){document.addEventListener("keydown",o=>{["w","a","s","d"].includes(o.key)&&(q.add(o.key),bt())}),document.addEventListener("keyup",o=>{["w","a","s","d"].includes(o.key)&&(q.delete(o.key),bt())})}function bt(){if(F={x:0,y:0},q.has("w")&&(F.y+=-1),q.has("s")&&(F.y+=1),q.has("a")&&(F.x+=-1),q.has("d")&&(F.x+=1),F.x!==0&&F.y!==0){const o=Math.sqrt(F.x*F.x+F.y*F.y);F.x/=o,F.y/=o}}Jt();
